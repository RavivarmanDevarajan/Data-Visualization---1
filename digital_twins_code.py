# -*- coding: utf-8 -*-
"""Digital Twins Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ori_mZcSV9qxU__ALrZpPxcDR_qD-tjy

#Visualization of Healthy and Faulty Conditions in a Hydraulic System using real-time simulated data

#Importing packages and loading the Data
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount ('/content/drive')
folder_path = ('/content/drive/MyDrive/data/healthy data')  #path locating the healthy condition data
file_list = os.listdir(folder_path)
dfs = []
for file_name in file_list:
  file_path = os.path.join(folder_path, file_name)

  if file_name.endswith('.lvm'):
    dataframe = pd.read_csv(file_path, delimiter='\t', skiprows=23)
    dfs.append(dataframe)
df = pd.concat(dfs, ignore_index = True)

df = df.rename(columns={'Pre-Filter Pressure Transducer' : 'P1', 'Post Filter Pressure Transducer' : 'P2', 'Pre Valve Pressure Transducer' : 'P3', 'Post Valve Pressure Transducer' : 'P4','End Pressure' : 'P5'})
df['P3'] += 1.01325 #Converting relative pressures to absolute pressures
df['P4'] += 1.01325
df['P5'] += 1.01325
df.head()

"""#Pressure Distributions(Healthy Conditions)

"""

columns = ['P1','P2','P3','P4','P5']
plt.figure(figsize=(10, 6))

for column in columns:
  plt.hist(df[column], alpha=0.5, label=column)

plt.xlabel('Pressure')
plt.ylabel('count')
plt.title('Pressure Distributions (Healthy Conditions)')
plt.legend(loc='upper right', bbox_to_anchor=(1,1))
plt.grid(True)
plt.show()

"""#No of Observations Vs Pressure (Healthy Conditions)"""

plt.figure(figsize=(10, 5))

plt.plot(df['X_Value'], df['P1'], label='P1 - Pressure before filter')
plt.plot(df['X_Value'], df['P2'], label='P2 - Pressure after filter')
plt.plot(df['X_Value'], df['P3'], label='P3 - Pressure before shut-off valve')
plt.plot(df['X_Value'], df['P4'], label='P4 - Pressure after shut-off valve')
plt.plot(df['X_Value'], df['P5'], label='P5 - Pressure after nozzle')

plt.xlabel('No. Of Observations')
plt.ylabel('Pressure (bar)')
plt.title('Pressure of each component of Fuel System Testbed (Healthy Conditions)')
plt.legend()
plt.show()

"""#Pressure Distributions (For Faulty Conditions) - Histograms
Clogged Filter fault condition (clogged filter datasets are used) is shown over here as example.



"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount ('/content/drive')
folder_path = ('/content/drive/MyDrive/data/clogged filter')     #changing the path (using clogged filter data)
file_list = os.listdir(folder_path)
dfs = []
for file_name in file_list:
  file_path = os.path.join(folder_path, file_name)

  if file_name.endswith('.lvm'):
    dataframe = pd.read_csv(file_path, delimiter='\t', skiprows=23)
    dfs.append(dataframe)
df = pd.concat(dfs, ignore_index = True)

df = df.rename(columns={'Pre-Filter Pressure Transducer' : 'P1', 'Post Filter Pressure Transducer' : 'P2', 'Pre Valve Pressure Transducer' : 'P3', 'Post Valve Pressure Transducer' : 'P4','End Pressure' : 'P5'})
df['P3'] += 1.01325 #Converting relative pressures to absolute pressures
df['P4'] += 1.01325
df['P5'] += 1.01325
cont_features = ['P1','P2','P3','P4','P5']
fig = plt.figure(figsize=(10,10))
plt.suptitle('Pressure Distributions (Clogged Filter)', fontsize=12)
initializer = 1
for feature in cont_features:
  plt.subplot(4, 3, initializer)
  plt.ylabel('Number of Observations')
  plt.xlabel('')
  sns.histplot(data=df, x=feature, kde= False)
  initializer+=1
plt.tight_layout()
plt.show()

"""#Valve Opening % Vs Pressures at each Pressure points - Line Plot"""

plt.plot(df['Untitled 1'], df['P1'], label='P1 - Pressure before filter')
plt.plot(df['Untitled 1'], df['P2'], label='P2 - Pressure after filter')
plt.plot(df['Untitled 1'], df['P3'], label='P3 - Pressure before shut-off valve')
plt.plot(df['Untitled 1'], df['P4'], label='P4 - Pressure after shut-off valve')
plt.plot(df['Untitled 1'], df['P5'], label='P5 - Pressure after nozzle ')

# Customize plot labels and title
plt.xlabel('Valve Opening %')
plt.ylabel('Pressure (bar)')
plt.title('Pressure of each component of Fuel System TestBed (Degraded Pump)')
plt.legend()
# Adjust legend position to the upper left and outside the plot
#plt.legend(loc='upper right', bbox_to_anchor=(1, 1))
# Show the plot
plt.show()

"""#Pressure after the filter Vs Valve Opening Percentage - Bar Plot

"""

required_columns = ['P1','P2','P3','P4','P5','Untitled 1']
selected_df = df[required_columns]
mean_values = selected_df.groupby('Untitled 1').mean() #calculating the average data points with respect to each valve opening %
print(mean_values)
mean_values.describe()
bar_width = 5
plt.bar(mean_values.index, mean_values['P2'],width = bar_width, align='center', alpha=0.5)
plt.xlabel('Valve Opening %')
plt.ylabel('Pressure after Filter')
plt.show()

"""#Pressure Difference (P3 - P2) Vs Volumetric Flow (All Data)- Scatter Plot/Line Plot

"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount ('/content/drive')
folder_path = ('/content/drive/MyDrive/data/All data') #All data sets are used
file_list = os.listdir(folder_path)
dfs = []
for file_name in file_list:
  file_path = os.path.join(folder_path, file_name)

  if file_name.endswith('.lvm'):
    dataframe = pd.read_csv(file_path, delimiter='\t', skiprows=23)
    dfs.append(dataframe)
df = pd.concat(dfs, ignore_index = True)
#renaming the columns for better understanding
df = df.rename(columns={'Pre-Filter Pressure Transducer' : 'P1', 'Post Filter Pressure Transducer' : 'P2', 'Pre Valve Pressure Transducer' : 'P3', 'Post Valve Pressure Transducer' : 'P4','End Pressure' : 'P5','Untitled 1':'Valve Opening%-cloggedfilter','Untitled 2':'Valve Opening%-degradedpump','Untitled 3':'Valve Opening%-stuckvalve','Untitled 4':'Valve Opening%-leakingpipe','Untitled 5':'Valve Opening%-cloggedinjector'})
df['P3'] += 1.01325 #Converting relative pressures to absolute pressures
df['P4'] += 1.01325
df['P5'] += 1.01325
selected_df = ['P3','P2','Valve Opening%-cloggedfilter','Valve Opening%-degradedpump','Valve Opening%-stuckvalve','Valve Opening%-leakingpipe','Valve Opening%-cloggedinjector','Sump Tank Flow Meter']
required_df = df [selected_df]
mean_cloggedfilter = required_df.groupby('Valve Opening%-cloggedfilter').mean() #calculating the average points w.r.t valve opening % -clogged filter
mean_cloggedfilter['group']= 'Clogged filter'    #Adding a seperate column to mention the fault type -clogged filter
mean_degradedpump = required_df.groupby('Valve Opening%-degradedpump').mean()  #calculating the average points w.r.t valve opening % -Degraded Pump
mean_degradedpump['group'] = 'Degraded Pump' #Adding a seperate column to mention the fault type - Degraded Pump
mean_stuckvalve = required_df.groupby('Valve Opening%-stuckvalve').mean()    #calculating the average points w.r.t valve opening % -Stuck Valve
mean_stuckvalve['group'] = 'Stuck Valve' #Adding a seperate column to mention the fault type -Stuck Valve
mean_leakingpipe = required_df.groupby('Valve Opening%-leakingpipe').mean()   #calculating the average points w.r.t valve opening % -Leaking Pipe
mean_leakingpipe['group'] = 'Leaking Pipe' #Adding a seperate column to mention the fault type - Leaking Pipe
mean_cloggedinjector = required_df.groupby('Valve Opening%-cloggedinjector').mean() #calculating the average points w.r.t valve opening % -clogged Injector
mean_cloggedinjector['group'] = 'Clogged Injector' #Adding a seperate column to mention the fault type - Clogged Injector
combined_df = pd.concat([mean_cloggedfilter, mean_degradedpump, mean_stuckvalve, mean_leakingpipe, mean_cloggedinjector])
combined_df['Difference'] = combined_df['P3'] - combined_df['P2']
plt.figure(figsize=(10, 6))
sns.scatterplot(data=combined_df, x='Difference', y='Sump Tank Flow Meter', hue = 'group')
sns.lineplot(data=combined_df, x ='Difference', y= 'Sump Tank Flow Meter', hue = 'group', style='group', legend=False )
plt.title('Pressure Difference(P3 - P2) Vs Volumetric Flow Rate')
plt.xlabel('Pressure Difference (P3-P2)')
plt.ylabel('Volumetric Flow Rate')